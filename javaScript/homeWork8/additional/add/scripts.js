{
    /*
    Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
    Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів

    {
        id: 1,
        name: 'Leanne Graham',
        username: 'Bret',
        email: 'Sincere@april.biz',
        address: {
            street: 'Kulas Light',
            suite: 'Apt. 556',
            city: 'Gwenborough',
            zipcode: '92998-3874',
            geo: {
                lat: '-37.3159',
                lng: '81.1496'
            }
        },
        phone: '1-770-736-8031 x56442',
        website: 'hildegard.org',
        company: {
            name: 'Romaguera-Crona',
            catchPhrase: 'Multi-layered client-server neural-net',
            bs: 'harness real-time e-markets'
        }
    }
     */

    function User(id,
                  name,
                  username,
                  email,
                  street,
                  suite,
                  city,
                  zipcode,
                  lat,
                  lng,
                  phone,
                  website,
                  companyName,
                  catchPhrase,
                  bs) {

        this.id = id;
        this.name = name;
        this.username = username;
        this.email = email;
        this.adress = {
            street,
            suite,
            city,
            zipcode,
            geo: {
                lat,
                lng
            }
        }
        this.phone = phone;
        this.website = website;
        this.company = {
            companyName,
            catchPhrase,
            bs
        }

    }

    const user = new User(1,
        'Leanne Graham',
        'Bret',
        'Sincere@april.biz',
        'Kulas Light',
        'Apt. 556',
        'Gwenborough',
        '92998-3874',
        '-37.3159',
        '81.1496',
        '1-770-736-8031 x56442',
        'hildegard.org',
        'Romaguera-Crona',
        'Multi-layered client-server neural-net',
        'harness real-time e-markets');
    console.log(user);

}

console.log();

{
// -  Створити функцію конструктор / клас  який описує об'єкт тегу
// Поля :
//  -назва тегу ()
//  - опис його дій
//  - масив з атрибутами (2-3 атрибути максимум)
//  Кожен атрибут описати як окремий який буде містити
//  -назву атрибуту
//  -опис дії атрибуту
//  інформацію брати з htmlbook.ru
//
//  Таким чином описати теги
//  -a
//  -div
//  -h1
//  -span
//  -input
//  -form
//  -option
//  -select
//  Приклад результуючого об'єкту
//    {
//         titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//         attrs: [
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//          {/*some props and values*/},
//          {/*...*/},
//          {/*...*/},
//          ]
//
//    }
    function Tag(titleOfTag,
                 action,
                 attrs) {
        this.titleOfTag = titleOfTag;
        this.action = action;
        this.attrs = attrs;
    }

    function Attrs(titleOfAttr,
                   actionOfAttr) {
        this.titleOfAttr = titleOfAttr;
        this.actionOfAtt = actionOfAttr;
    }

    const tags = [];

    tags.push(
        new Tag(
            'a',
            'Елемент <a> (від англ. anchor — якір) є одним з важливих в HTML і призначений для створення посилань. Для цього необхідно повідомити браузер, що є посиланням, а також вказати адресу документа, на який слід зробити посилання. Як атрибут href використовується адреса документа, на який відбувається перехід. Адреса посилання може бути абсолютним та відносним. Абсолютні адреси працюють скрізь і всюди, незалежно від імені сайту або веб-сторінки, де прописано посилання. Відносні посилання, як випливає з їхньої назви, побудовані щодо поточного документа або кореня сайту.',
            [
                new Attrs(
                    'coords',
                    'Встановлює координати актів ної області.'),
                new Attrs(
                    'download',
                    'Пропонує завантажити вказаний за посиланням файл.'),
                new Attrs(
                    'href',
                    'Вказує адресу документа, який слід перейти.')]));
    tags.push(
        new Tag(
            'div',
            'Елемент <div> (від англ. division — розділ, секція) є універсальним блоковим елементом і призначений для групування елементів документа з метою зміни виду вмісту через стилі. Для цього додається атрибут class або id з ім\'ям класу або ідентифікатора.',
            [
                new Attrs(
                    'align',
                    'Визначає вирівнювання вмісту <div>.')]));
    tags.push(
        new Tag(
            'h1',
            'HTML пропонує шість заголовків різного рівня, які показують відносну важливість секції, розташованої після заголовка. Так, елемент <h1> (від англ. heading — заголовок) є найважливішим заголовком першого рівня, а <h6> служить для позначення заголовка шостого рівня і є найменшим. За замовчуванням, заголовок першого рівня відображається найбільшим шрифтом жирного зображення, заголовки наступного рівня за розміром менше. Елементи <h1>,...,<h6> відносяться до блокових елементів, вони завжди починаються з нового рядка, а потім інші елементи відображаються на наступному рядку. Крім того, перед заголовком та після нього додається порожній простір.',
            [
                {
                    titleOfAttr: 'align',
                    actionOfAttr: 'Визначає вирівнювання заголовка.'
                }
            ]));
    tags.push(
        new Tag(
            'span',
            'Універсальний рядковий елемент < span> (від англ. span — охоплювати) призначений для виділення окремих рядків, символів або інших малих елементів для подальшої зміни їх оформлення за допомогою стилів. Наприклад, всередині абзацу (<p>) можна змінити колір і розмір першого слова, якщо його виділити за допомогою елемента <span> ; і задати йому бажаний стиль.'));
    tags.push(
        new Tag(
            'input',
            'Тег <input> є одним із різнобічних елементів форми і дозволяє створювати різні елементи інтерфейсу та забезпечити взаємодію з користувачем. Головним чином <input> призначений для створення текстових полів, різних кнопок, перемикачів та прапорців. Хоча елемент <input> не потрібно поміщати всередину контейнера <form> , що визначає форму, але якщо введені користувачем дані повинні бути відправлені на сервер, де їх обробляє серверна програма, то обов\'язково вказувати <form> . Те саме відбувається і в разі обробки даних за допомогою клієнтських додатків, наприклад, скриптів на мові JavaScript.',
            [
                new Attrs(
                    'accept',
                    'Встановлює фільтр на типи файлів, які можна надіслати через поле завантаження файлів.'
                ),
                new Attrs(
                    'accesskey',
                    'Перехід до елемента за допомогою комбінації клавіш.'
                )
            ]
        ));
    tags.push(
        new Tag(
            'form',
            'Елемент <form> (від англ. form — форма) встановлює форму на веб-сторінці. Форма призначена для обміну даними між користувачем та сервером. Область застосування форм не обмежена надсиланням даних на сервер, за допомогою клієнтських скриптів можна отримати доступ до будь-якого елементу форми, змінювати його та застосовувати на свій розсуд.',
            [
                new Attrs(
                    'accept-charset',
                    'Встановлює кодування, в якому сервер може приймати та обробляти дані.'
                ),
                new Attrs(
                    'action',
                    'Адреса програми або документа, який обробляє дані форми.'
                )
            ]));
    tags.push(
        new Tag(
            'option',
            'Елемент <option> (від англ. option — варіант, вибір) визначає окремі пункти списку, створюваного за допомогою контейнера <select>. Ширина списку визначається найширшим текстом, вказаним у <option>, а також може змінюватися за допомогою стилів. Якщо планується надсилати дані списку на сервер, потрібно помістити елемент <select> всередину форми. Це також необхідно, коли до даних списку йде звернення через скрипти.',
            [
                new Attrs(
                    'disabled',
                    'Заблокувати для доступу елемент списку.'
                ),
                new Attrs(
                    'label',
                    'Вказує позначку списку.'
                )
            ]
        ));
    tags.push(
        new Tag(
            'select',
            '<select> (від англ. selection — вибір) дозволяє створити елемент інтерфейсу у вигляді списку, що розкривається, а також список з одним або множинним вибором. Кінцевий вигляд залежить від використання атрибута size, який визначає висоту списку. Ширина списку визначається найширшим текстом, вказаним в елементі <option>, а також може змінюватися за допомогою стилів. Кожен пункт створюється за допомогою елемента <option>, який має бути вкладений у контейнер <select>. Якщо планується надсилати дані списку на сервер, потрібно помістити <select> всередину форми. Це також необхідно, коли до даних списку йде звернення через скрипти.',
            [
                new Attrs(
                    'autofocus',
                    'Встановлює, що список отримує фокус після завантаження сторінки.'
                ),
                new Attrs(
                    'disabled',
                    'Блокує доступ та зміну елемент.'
                )
            ]
        ));
    console.log(tags);
}